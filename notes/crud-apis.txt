

## 1. Challenge Management APIs (ChallengeController)

These endpoints allow administrators to manage different challenges.

- **GET /challenges**  
  _Description:_ List all challenges.  
  _Controller:_ `ChallengeController.getAll()`

- **GET /challenges/:id**  
  _Description:_ Retrieve details for a specific challenge.  
  _Controller:_ `ChallengeController.getOne()`

- **POST /challenges**  
  _Description:_ Create a new challenge (with settings, etc.).  
  _Controller:_ `ChallengeController.create()`

- **PUT /challenges/:id**  
  _Description:_ Update a challenge’s details (e.g., name or settings).  
  _Controller:_ `ChallengeController.update()`

- **DELETE /challenges/:id**  
  _Description:_ Delete a challenge.  
  _Controller:_ `ChallengeController.delete()`

---

## 2. Bracket Management APIs (BracketController)

These endpoints manage bracket data within a challenge.

- **GET /brackets**  
  _Description:_ List all brackets (or filter by challenge, e.g., `/challenges/:challengeId/brackets`).  
  _Controller:_ `BracketController.getAll()`

- **GET /brackets/:id**  
  _Description:_ Get details of a specific bracket (including its matches).  
  _Controller:_ `BracketController.getOne()`

- **POST /brackets**  
  _Description:_ Create a new bracket for a challenge (specify bracket position such as ROUND_OF_16, etc.).  
  _Controller:_ `BracketController.create()`

- **PUT /brackets/:id**  
  _Description:_ Update bracket details.  
  _Controller:_ `BracketController.update()`

- **DELETE /brackets/:id**  
  _Description:_ Delete a bracket.  
  _Controller:_ `BracketController.delete()`

---

## 3. Match Management APIs (MatchController)

These endpoints handle match scheduling, score updates, and status changes.

- **GET /matches**  
  _Description:_ List all matches (or filter by bracket/challenge).  
  _Controller:_ `MatchController.getAll()`

- **GET /matches/:id**  
  _Description:_ Retrieve a single match, including details about team1 and team2.  
  _Controller:_ `MatchController.getOne()`

- **POST /matches**  
  _Description:_ Create a new match (assign teams, bracket, challenge, start_time, etc.).  
  _Controller:_ `MatchController.create()`

- **PUT /matches/:id**  
  _Description:_ Update match details (status, scores, start/end times, round position).  
  _Controller:_ `MatchController.update()`

- **DELETE /matches/:id**  
  _Description:_ Delete a match record.  
  _Controller:_ `MatchController.delete()`

*Optional/Additional Endpoints:*  
- **POST /matches/:id/start** – Start a match.  
- **POST /matches/:id/stop** – Stop or finish a match.  
- **POST /matches/:id/pause** – Pause a match.  
- **PUT /matches/:id/score** – Update the score during or after a match.

---

## 4. Team Management APIs (TeamController)

These endpoints are for registering and managing teams.

- **GET /teams**  
  _Description:_ List all teams (optionally filter by challenge).  
  _Controller:_ `TeamController.getAll()`

- **GET /teams/:id**  
  _Description:_ Get details for a specific team, including its matches (as team1 or team2) and participants.  
  _Controller:_ `TeamController.getOne()`

- **POST /teams**  
  _Description:_ Create a new team and assign it to a challenge.  
  _Controller:_ `TeamController.create()`

- **PUT /teams/:id**  
  _Description:_ Update team details (like team name, challenge assignment, etc.).  
  _Controller:_ `TeamController.update()`

- **DELETE /teams/:id**  
  _Description:_ Delete a team (this deletion will cascade to remove participants, and match relations will be set to null if you use SET NULL).  
  _Controller:_ `TeamController.delete()`

---

## 5. Participant Management APIs (ParticipantController)

These endpoints manage the participants (members or captain) within teams.

- **GET /participants**  
  _Description:_ List all participants (optionally filter by team).  
  _Controller:_ `ParticipantController.getAll()`

- **GET /participants/:id**  
  _Description:_ Retrieve details for a specific participant.  
  _Controller:_ `ParticipantController.getOne()`

- **POST /participants**  
  _Description:_ Create a new participant (assign them to a team).  
  _Controller:_ `ParticipantController.create()`

- **PUT /participants/:id**  
  _Description:_ Update participant information.  
  _Controller:_ `ParticipantController.update()`

- **DELETE /participants/:id**  
  _Description:_ Delete a participant.  
  _Controller:_ `ParticipantController.delete()`

---

## Additional Considerations

- **Authentication/Authorization APIs:**  
  Although not detailed in your entities, you may need endpoints for admin login, token management, etc., typically in an **AuthController**.

- **Dashboard or Real-time APIs:**  
  Depending on requirements, you might implement endpoints that aggregate data for live scoreboards or admin dashboards.

- **Query Optimization:**  
  For complex queries (e.g., filtering matches by team, bracket, or challenge), consider additional endpoints or query parameters.

